## These functions will take as the input a matrix
## Compute and cache the inverse of the matrix

## This function creates a special "matrix" object that can cache its inverse
## The function produces a list of functions in a separate environment
## The function itself, the input vector, and the m vector exists in the global environment 
## The list of functions a copy of the input vector and m all exist in the new environment

makeCacheMatrix<-function(x=matrix()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setinverse<-function(solve)x<<-solve
getinverse<-function()m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}

##This function computes the inverse of the special "matrix" 
##returned by makeCacheMatrix above. If the inverse has already 
##been calculated (and the matrix has not changed), 
##then the cachesolve should retrieve the inverse from the cache.

cacheSolve <- function(x,...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
        
